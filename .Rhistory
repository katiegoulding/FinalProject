View(refined.voters.data.frame)
refined.voters.data.frame$party.vote <- (refined.voters.data.frame$Party == 'I' & refined.voters.data.frame$Vote == ind) | (refined.voters.data.frame$Party == 'D' & refined.voters.data.frame$Vote == dem) | (refined.voters.data.frame$Party == 'R' & refined.voters.data.frame$Vote == rep)
View(refined.voters.data.frame)
?spline
install.packages('shiny')
library(shiny)
library(shiny)
library(shiny)
library(shiny)
shinyApp(ui = my.ui, server = my.server)
my.ui <- fluidPage(
#formatted content
h1('Hello Shiny'),
#control widget
textInput('user.name', label = 'What is your name?')
)
my.server <- function(input, output) {
}
runApp('Desktop/INFO 201 Autumn 17 HW/module15-shiny/exercise-1')
my.ui <- fluidPage(
#formatted content
h1('Hello Shiny'),
#control widget
textInput('user.name', label = 'What is your name?'),
sliderInput('slide.key', label = 'Pick a number',
min = 1, max = 20, value = 4)
)
runApp('Desktop/INFO 201 Autumn 17 HW/module15-shiny/exercise-1')
runApp('Desktop/INFO 201 Autumn 17 HW/module15-shiny/exercise-1')
data("iris")
iris.data <- data("iris")
iris.data <- data(iris)
iris.data <- data("iris")
data("iris")
iris.data <- data("iris")
data("iris")
library(dplyr)
data("iris")
iris.data <- data("iris")
View(data("iris"))
View("iris")
View(iris)
iris.data <- data(iris)
data(iris)
iris.data <- data(iris)
View(iris)
iris.data <- iris
library(shiny)
library(dplyr)
View(iris)
?iris
View(iris)
shinyUi(fluidPage(
# Application title
titlePanel("Iris Data"), # MAKE BOLD LATER
# Sidebar with controls to select the random distribution type
# and number of observations to generate. Note the use of the
# br() element to introduce extra vertical spacing
# one "controls" column that will contain interaction widgets
sidebarLayout(
sidebarPanel(
radioButtons("dist", "Distribution type:",
c("Normal" = "norm",
"Uniform" = "unif",
"Log-normal" = "lnorm",
"Exponential" = "exp")),
br(),
sliderInput("n",
"Number of observations:",
value = 500,
min = 1,
max = 1000)
),
# Show a tabset that includes a plot, summary, and table view
# of the generated distribution
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Plot", plotOutput("plot")),
tabPanel("Table", tableOutput("table"))
)
)
)
)
)
library(shiny)
View(iris)
runApp('Desktop/INFO 201 Autumn 17 HW/a8-data-app-campbellsean/DataApp')
runApp('Desktop/INFO 201 Autumn 17 HW/a8-data-app-campbellsean/DataApp')
runApp('Desktop/INFO 201 Autumn 17 HW/a8-data-app-campbellsean/DataApp')
runApp('Desktop/INFO 201 Autumn 17 HW/a8-data-app-campbellsean/DataApp')
runApp('Desktop/INFO 201 Autumn 17 HW/a8-data-app-campbellsean/DataApp')
runApp('Desktop/INFO 201 Autumn 17 HW/a8-data-app-campbellsean/DataApp')
runApp('Desktop/INFO 201 Autumn 17 HW/a8-data-app-campbellsean/DataApp')
runApp('Desktop/INFO 201 Autumn 17 HW/a8-data-app-campbellsean/DataApp')
sepal.length.range
sepal.length.range <- range(iris$Sepal.Length)
sepal.length.range
petal.length.range <- range(iris$Petal.Length)
petal.length.range
runApp('Desktop/INFO 201 Autumn 17 HW/a8-data-app-campbellsean/DataApp')
runApp('Desktop/INFO 201 Autumn 17 HW/a8-data-app-campbellsean/DataApp')
runApp('Desktop/INFO 201 Autumn 17 HW/a8-data-app-campbellsean/DataApp')
sepal.length.range <- range(iris$Sepal.Length)
sepal.length.range
runApp('Desktop/INFO 201 Autumn 17 HW/a8-data-app-campbellsean/DataApp')
sepal.length.range <- c(3.3, 7)
runApp('Desktop/INFO 201 Autumn 17 HW/a8-data-app-campbellsean/DataApp')
test
runApp('Desktop/INFO 201 Autumn 17 HW/a8-data-app-campbellsean/DataApp')
runApp('Desktop/INFO 201 Autumn 17 HW/a8-data-app-campbellsean/DataApp')
runApp('Desktop/INFO 201 Autumn 17 HW/a8-data-app-campbellsean/DataApp')
?iris
runApp('Desktop/INFO 201 Autumn 17 HW/a8-data-app-campbellsean/DataApp')
>labs
?labs
runApp('Desktop/INFO 201 Autumn 17 HW/a8-data-app-campbellsean/DataApp')
runApp('Desktop/INFO 201 Autumn 17 HW/a8-data-app-campbellsean/DataApp')
runApp('Desktop/INFO 201 Autumn 17 HW/a8-data-app-campbellsean/DataApp')
runApp('Desktop/INFO 201 Autumn 17 HW/a8-data-app-campbellsean/DataApp')
iris.data <- diamonds
runApp('Desktop/INFO 201 Autumn 17 HW/a8-data-app-campbellsean/DataApp')
runApp('Desktop/INFO 201 Autumn 17 HW/a8-data-app-campbellsean/DataApp')
runApp('Desktop/INFO 201 Autumn 17 HW/a8-data-app-campbellsean/DataApp')
runApp('Desktop/INFO 201 Autumn 17 HW/a8-data-app-campbellsean/DataApp')
runApp('Desktop/INFO 201 Autumn 17 HW/a8-data-app-campbellsean/DataApp')
shiny::runApp('Desktop/INFO 201 Autumn 17 HW/FinalProject')
runApp('Desktop/INFO 201 Autumn 17 HW/FinalProject')
View(speed.dating.long)
speed.dating.df <- simpleSpeedDating.df
#Selecting racial groups
speed.dating.df <- filter(speed.dating.df, Race == input$racial.group.1 | Race == input$racial.group.2)
#Selecting interest
if(input$interest.select == "Attribute Rating") {
speed.dating.df <- select(speed.dating.df, Race, Preference.of.Partner.Attract:Preference.of.Partner.Shared.Interest)
}
if(input$interest.select == "Hobbies") {
speed.dating.df <- select(speed.dating.df, Race, Sports:Yoga)
}
if(input$interest.select == "Importance of Race or Religion") {
speed.dating.df <- select(speed.dating.df, Race, Importance.Same.Race, Importance.Same.Religion)
}
#Convert df to long format
speed.dating.long <- gather(speed.dating.df,
key = interest,
value = rating,
2:ncol(speed.dating.df))
#Get medians of the interests selected
speed.dating.long <- group_by(speed.dating.long, Race, interest) %>%
summarize("Median" = median(rating, na.rm = TRUE))
speed.dating.long$my_text <- c("sean")
View(speed.dating.long)
library(shiny)
library(dplyr)
library(ggplot2)
library(plotly)
library(tidyr)
simpleSpeedDating.df <- read.csv("data/simpleSpeedDating.df.csv", stringsAsFactors = FALSE)
server <- function(input, output, session) {
data <- reactive({
speed.dating.df <- simpleSpeedDating.df
#Selecting racial groups
speed.dating.df <- filter(speed.dating.df, Race == input$racial.group.1 | Race == input$racial.group.2)
#Selecting interest
if(input$interest.select == "Attribute Rating") {
speed.dating.df <- select(speed.dating.df, Race, Preference.of.Partner.Attract:Preference.of.Partner.Shared.Interest)
}
if(input$interest.select == "Hobbies") {
speed.dating.df <- select(speed.dating.df, Race, Sports:Yoga)
}
if(input$interest.select == "Importance of Race or Religion") {
speed.dating.df <- select(speed.dating.df, Race, Importance.Same.Race, Importance.Same.Religion)
}
#Convert df to long format
speed.dating.long <- gather(speed.dating.df,
key = interest,
value = rating,
2:ncol(speed.dating.df))
#Get medians of the interests selected
speed.dating.long <- group_by(speed.dating.long, Race, interest) %>%
summarize("Median" = median(rating, na.rm = TRUE))
speed.dating.long$my_text <- c("sean")
View(speed.dating.long)
return(speed.dating.long)
})
output$second.vis <- renderPlotly({
plot_ly(data(), x = ~interest, y = ~Median, type = "bar", color = ~Race, text=data()$my_text, hoverinfo = "text+x+y") %>%
layout(margin = 100)
})
}
shinyServer(server)
View(speed.dating.long)
simpleSpeedDating.df <- read.csv("data/simpleSpeedDating.df.csv", stringsAsFactors = FALSE)
server <- function(input, output, session) {
data <- reactive({
speed.dating.df <- simpleSpeedDating.df
#Selecting racial groups
speed.dating.df <- filter(speed.dating.df, Race == input$racial.group.1 | Race == input$racial.group.2)
#Selecting interest
if(input$interest.select == "Attribute Rating") {
speed.dating.df <- select(speed.dating.df, Race, Preference.of.Partner.Attract:Preference.of.Partner.Shared.Interest)
}
if(input$interest.select == "Hobbies") {
speed.dating.df <- select(speed.dating.df, Race, Sports:Yoga)
}
if(input$interest.select == "Importance of Race or Religion") {
speed.dating.df <- select(speed.dating.df, Race, Importance.Same.Race, Importance.Same.Religion)
}
#Convert df to long format
speed.dating.long <- gather(speed.dating.df,
key = interest,
value = rating,
2:ncol(speed.dating.df))
#Get medians of the interests selected
speed.dating.long <- group_by(speed.dating.long, Race, interest) %>%
summarize("Median" = median(rating, na.rm = TRUE))
speed.dating.long$my_text <- c("sean")
View(speed.dating.long)
return(speed.dating.long)
return(speed.dating.long)
View(data())
View(simpleSpeedDating.df)
dd
x
;\
View(simpleSpeedDating.df)
simpleSpeedDating.df <- read.csv("data/simpleSpeedDating.df.csv", stringsAsFactors = FALSE)
setwd("~/Desktop/INFO 201 Autumn 17 HW/FinalProject")
simpleSpeedDating.df <- read.csv("data/simpleSpeedDating.df.csv", stringsAsFactors = FALSE)
View(simpleSpeedDating.df)
speed.dating.long <- gather(speed.dating.df,
key = interest,
value = rating,
2:ncol(speed.dating.df))
speed.dating.df <- simpleSpeedDating.df
#Selecting racial groups
speed.dating.df <- filter(speed.dating.df, Race == input$racial.group.1 | Race == input$racial.group.2)
#Selecting interest
if(input$interest.select == "Attribute Rating") {
speed.dating.df <- select(speed.dating.df, Race, Preference.of.Partner.Attract:Preference.of.Partner.Shared.Interest)
}
if(input$interest.select == "Hobbies") {
speed.dating.df <- select(speed.dating.df, Race, Sports:Yoga)
}
if(input$interest.select == "Importance of Race or Religion") {
speed.dating.df <- select(speed.dating.df, Race, Importance.Same.Race, Importance.Same.Religion)
}
#Convert df to long format
speed.dating.long <- gather(speed.dating.df,
key = interest,
value = rating,
2:ncol(speed.dating.df))
View(speed.dating.long)
View(speed.dating.long)
speed.dating.long$my_text <- c("Percent of Female")
View(speed.dating.long)
runApp()
rrrr
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(speed.dating.long)
speed.dating.df <- simpleSpeedDating.df
#Selecting racial groups
speed.dating.df <- filter(speed.dating.df, Race == input$racial.group.1 | Race == input$racial.group.2)
#Selecting interest
if(input$interest.select == "Attribute Rating") {
speed.dating.df <- select(speed.dating.df, Race, Preference.of.Partner.Attract:Preference.of.Partner.Shared.Interest)
}
if(input$interest.select == "Hobbies") {
speed.dating.df <- select(speed.dating.df, Race, Sports:Yoga)
}
if(input$interest.select == "Importance of Race or Religion") {
speed.dating.df <- select(speed.dating.df, Race, Importance.Same.Race, Importance.Same.Religion)
}
#Convert df to long format
speed.dating.long <- gather(speed.dating.df,
key = interest,
value = rating,
2:ncol(speed.dating.df))
#Get medians of the interests selected
speed.dating.long <- group_by(speed.dating.long, Race, interest) %>%
summarize("Median" = median(rating, na.rm = TRUE))
View(speed.dating.long)
speed.dating.long <- group_by(speed.dating.long, Race, interest) %>%
summarize("Median" = median(rating, na.rm = TRUE))
View(data())
View(data())
data()
runApp()
runApp()
runApp()
simpleSpeedDating.df <-
read.csv("data/simpleSpeedDating.df.csv", stringsAsFactors = FALSE)
setwd("~/Desktop/INFO 201 Autumn 17 HW/FinalProject")
runApp()
speed.dating.df <- simpleSpeedDating.df
speed.dating.df <- group_by(speed.dating.df, Partner.ID) %>%
summarize(mean1 = mean(Overall.Like), mean2 = mean(Final.Attractiveness.Rating), mean3 = mean(Final.Sincerity.Rating)) %>%
mutate(overall.success = (mean1 + mean2 + mean3)/3) %>%
drop_na
names(speed.dating.df)[names(speed.dating.df) == "Partner.ID"] <- "ID"
simpleSpeedDating.df$Attractiveness.5[is.na(simpleSpeedDating.df$Attractiveness.5)] <- mean(simpleSpeedDating.df$Attractiveness.5, na.rm = TRUE)
simpleSpeedDating.df$Fun.5[is.na(simpleSpeedDating.df$Fun.5)] <- mean(simpleSpeedDating.df$Fun.5, na.rm = TRUE)
simpleSpeedDating.df$Ambition.5[is.na(simpleSpeedDating.df$Ambition.5)] <- mean(simpleSpeedDating.df$Ambition.5, na.rm = TRUE)
simpleSpeedDating.df$Intelligence.5[is.na(simpleSpeedDating.df$Intelligence.5)] <- mean(simpleSpeedDating.df$Intelligence.5, na.rm = TRUE)
simpleSpeedDating.df$Sincerity.5[is.na(simpleSpeedDating.df$Sincerity.5)] <- mean(simpleSpeedDating.df$Sincerity.5, na.rm = TRUE)
simpleSpeedDating.df$Expected.Matches[is.na(simpleSpeedDating.df$Expected.Matches)] <- mean(simpleSpeedDating.df$Expected.Matches, na.rm = TRUE)
speed.dating.df <- merge(x = speed.dating.df, y = simpleSpeedDating.df[ , c("ID", "Expected.Matches", "Attractiveness.4", "Sincerity.4", "Intelligence.4", "Fun.4",
"Ambition.4", "Attractiveness.5", "Sincerity.5", "Intelligence.5", "Fun.5", "Ambition.5")], by = "ID", na.rm = TRUE) %>%
unique()
speed.dating.df$Expected.Matches <- (speed.dating.df$Expected.Matches) / 20
speed.dating.df[, 7:16] <- speed.dating.df[, 7:16] / 10
speed.dating.df$overall.success <- speed.dating.df$overall.success / 10
speed.dating.df$overall.confidence <- (speed.dating.df$Attractiveness.4 + speed.dating.df$Sincerity.4 + speed.dating.df$Intelligence.4 +
speed.dating.df$Fun.4 + speed.dating.df$Ambition.4 + speed.dating.df$Attractiveness.5 + speed.dating.df$Sincerity.5 + speed.dating.df$Intelligence.5 +
speed.dating.df$Fun.5 + speed.dating.df$Ambition.5) / 10
View(speed.dating.df)
runApp()
runApp('~/Desktop/INFO 201 Autumn 17 HW/a8-data-app-campbellsean/DataApp')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
count.per.race <- select(simpleSpeedDating.df, ID, Race, Sex) %>%
unique() %>%
group_by(Race) %>%
summarize(count = n()) %>%
drop_na()
# Number of total participants
total.participants <- sum(count.per.race$count)
# Creates df with percent breakdown
race.df <- mutate(count.per.race, percent.race = round(count/total.participants * 100, 2))
View(race.df)
View(race.df)
x <- list(
title = "Race/Gender"
)
View(race.df)
count.per.race <- select(simpleSpeedDating.df, ID, Race, Sex) %>%
unique() %>%
group_by(Race, Sex) %>%
summarize(count = n()) %>%
drop_na()
# Number of total participants
total.participants <- sum(count.per.race$count)
# Creates df with percent breakdown
race.df <- mutate(count.per.race, percent.race = round(count/total.participants * 100, 2))
View(race.df)
View(race.df)
View(race.df)
View(race.df)
View(race.df)
runApp()
runApp()
runApp()
runApp()
sex.race.data <- select(simpleSpeedDating.df, ID, Race, Sex) %>%
unique() %>%
group_by(Race, Sex) %>%
summarize(count = n()) %>%
drop_na()
# Number of total participants
total.participants <- sum(sex.race.data$count)
# Creates df with percent breakdown
sex.race.data.df <- mutate(sex.race.data, percent.race = round(count/total.participants * 100, 2))
View(sex.race.data.df)
sex.race.graph <- plot_ly(x = sex.race.data.df$Race, y = sex.race.data.df$percent.race, type = "bar", color = sex.race.data.df$Sex) %>%
layout(margin = list(b = 150, r = 30), xaxis = x.sex.race, yaxis = y.sex.race)
})
output$sex.race.graph <- renderPlotly({
# Creates a new df with "count" column, which counts the number of
# participants who identified with each race
sex.race.data <- select(simpleSpeedDating.df, ID, Race, Sex) %>%
unique() %>%
group_by(Race, Sex) %>%
summarize(count = n()) %>%
drop_na()
# Number of total participants
total.participants <- sum(sex.race.data$count)
# Creates df with percent breakdown
sex.race.data.df <- mutate(sex.race.data, percent.race = round(count/total.participants * 100, 2))
# Creates an x-axis title
x.sex.race <- list(
title = "Race/Gender"
)
# Creates a y-axis title
y.sex.race <- list(
title = "Percent"
)
sex.race.graph <- plot_ly(x = sex.race.data.df$Race, y = sex.race.data.df$percent.race, type = "bar", color = sex.race.data.df$Sex) %>%
layout(margin = list(b = 150, r = 30), xaxis = x.sex.race, yaxis = y.sex.race)
})
output$sex.graph <- renderPlotly({
count.per.sex <- select(simpleSpeedDating.df, ID, Sex) %>%
unique() %>%
group_by(Sex) %>%
summarize(count = n()) %>%
drop_na()
total.participants <- sum(count.per.sex$count)
# Creates df with percent breakdown
sex.df <- mutate(count.per.sex, ratio.sex = (count))
# Creates an x-axis title
x <- list(
title = "Sex"
)
# Creates a y-axis title
y <- list(
title = "Number of persons identified with respective gender"
)
# Creates a title for the sex bar graph ***does not work***
title.sex <- list(
title = "Sex breakdown of all participants"
)
# Produces plotly bar graph of sex breakdown
sex.graph <- plot_ly(
x = sex.df$Sex,
y = sex.df$ratio.sex,
name = "Participant Sex Breakdown",
type = "bar",
color = sex.df$Sex,
showlegend = FALSE) %>%
layout(title = title.sex, xaxis = x, yaxis = y)
})
count.per.sex <- select(simpleSpeedDating.df, ID, Sex) %>%
unique() %>%
group_by(Sex) %>%
summarize(count = n()) %>%
drop_na()
total.participants <- sum(count.per.sex$count)
# Creates df with percent breakdown
sex.df <- mutate(count.per.sex, ratio.sex = (count))
# Creates an x-axis title
x <- list(
title = "Sex"
)
# Creates a y-axis title
y <- list(
title = "Number of persons identified with respective gender"
)
# Creates a title for the sex bar graph ***does not work***
title.sex <- list(
title = "Sex breakdown of all participants"
)
# Produces plotly bar graph of sex breakdown
sex.graph <- plot_ly(
x = sex.df$Sex,
y = sex.df$ratio.sex,
name = "Participant Sex Breakdown",
type = "bar",
color = sex.df$Sex,
showlegend = FALSE) %>%
layout(title = title.sex, xaxis = x, yaxis = y)
View(sex.graph)
runApp()
runApp()
speed.dating.df <- simpleSpeedDating.df
#Selecting racial groups
speed.dating.df <- filter(speed.dating.df, Race == input$racial.group.1 | Race == input$racial.group.2)
#Selecting interest
if(input$interest.select == "Attribute Rating") {
speed.dating.df <- select(speed.dating.df, Race, Preference.of.Partner.Attract:Preference.of.Partner.Shared.Interest, Sex)
}
if(input$interest.select == "Hobbies") {
speed.dating.df <- select(speed.dating.df, Race, Sports:Yoga, Sex)
}
if(input$interest.select == "Importance of Race or Religion") {
speed.dating.df <- select(speed.dating.df, Race, Importance.Same.Race, Importance.Same.Religion, Sex)
}
#Convert df to long format
speed.dating.long <- gather(speed.dating.df,
key = interest,
value = rating,
2:ncol(speed.dating.df))
#Get medians of the interests selected
speed.dating.long <- group_by(speed.dating.long, Race, interest) %>%
summarize("Median" = median(rating, na.rm = TRUE))
simpleSpeedDating.df <- read.csv("data/simpleSpeedDating.df.csv", stringsAsFactors = FALSE)
speed.dating.df <- simpleSpeedDating.df
#Selecting racial groups
speed.dating.df <- filter(speed.dating.df, Race == input$racial.group.1 | Race == input$racial.group.2)
#Selecting interest
if(input$interest.select == "Attribute Rating") {
speed.dating.df <- select(speed.dating.df, Race, Preference.of.Partner.Attract:Preference.of.Partner.Shared.Interest, Sex)
}
if(input$interest.select == "Hobbies") {
speed.dating.df <- select(speed.dating.df, Race, Sports:Yoga, Sex)
}
if(input$interest.select == "Importance of Race or Religion") {
speed.dating.df <- select(speed.dating.df, Race, Importance.Same.Race, Importance.Same.Religion, Sex)
}
#Convert df to long format
speed.dating.long <- gather(speed.dating.df,
key = interest,
value = rating,
2:ncol(speed.dating.df))
#Get medians of the interests selected
speed.dating.long <- group_by(speed.dating.long, Race, interest) %>%
summarize("Median" = median(rating, na.rm = TRUE))
View(speed.dating.long)
runApp()
View(speed.dating.long)
runApp()
runApp()
runApp()
runApp()
