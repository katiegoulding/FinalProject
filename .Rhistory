<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
#Creates data frame from voters.as.data.frame that shows the majority vote for each party
party.votes.majority.members <- group_by(voters.as.data.frame, voter.party, vote) %>%
summarize(Vote.Majority = n()) %>%
mutate(Total.members = sum(Vote.Majority)) %>%
group_by(voter.party) %>%
filter(Vote.Majority == max(Vote.Majority))
#Creates readable column names for party.votes.majority.members
colnames(party.votes.majority.members)[1] <- "Party"
colnames(party.votes.majority.members)[3] <- "Party Votes"
colnames(party.votes.majority.members)[4] <- "Total Members"
#Creates data frame to compare the local representatives from zip code on their vote versus their party's majority vote
representative.votes <- inner_join(body.representatives, voters.as.data.frame, by = c("bioguide_id" = "voter.bioguide_id")) %>%
inner_join(party.votes.majority.members, by = c("party" = "Party")) %>%
select(first_name, last_name, party, vote.x, vote.y)
#Creates readable column names for representative.votes and party.votes.majority.members
colnames(representative.votes)[1] <- "Representative First Name"
colnames(representative.votes)[2] <- "Representative Last Name"
colnames(representative.votes)[4] <- "Representative Vote"
colnames(representative.votes)[5] <- "Party Vote"
party.votes <- group_by(voters.as.data.frame, voter.party, vote) %>%
summarize(Votes = n())
party.votes.D <- filter(party.votes, voter.party == "D")
party.votes.I <- filter(party.votes, voter.party == "I")
party.votes.R <- filter(party.votes, voter.party == "R")
barplot(party.votes.D$Votes)
barplot(party.votes.D$Votes, names.arg = party.votes.D$Vote)
barplot(party.votes.D$Votes, names.arg = party.votes.D$vote)
barplot(party.votes.D$Votes, names.arg = party.votes.D$vote, xlab = "Vote", ylab = "Number of Votes", main = "Party Vote Breakdown for Democrats")
barplot(party.votes.I$Votes, names.arg = party.votes.I$vote, xlab = "Vote", ylab = "Number of Votes",
main = "Party Vote Breakdown for Independents", width = 1)
barplot(party.votes.I$Votes, names.arg = party.votes.I$vote, xlab = "Vote", ylab = "Number of Votes",
main = "Party Vote Breakdown for Independents", width = 2)
barplot(party.votes.I$Votes, names.arg = party.votes.I$vote, xlab = "Vote", ylab = "Number of Votes",
main = "Party Vote Breakdown for Independents", width = .5)
install.packages("ggplot2")
library("ggplot")
library("ggplot2")
View(mpg)
>>>>>>> second_vis_preferences
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
View(mpg)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(data = mpg) +
geom_bar(mapping = aes(x = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
geom_smooth(mapping = aes(x = displ, y = hwy), se=FALSE)
View(diamonds)
print(colnames(diamonds))
print(nrow(diamonds))
diamonds.sample <- sample_n(diamonds)
diamonds.sample <- sample_n(1000, diamonds)
diamonds.sample <- sample_n(diamonds, 1000)
# Exercise 1: ggplot2 basics
# Install and load `ggplot2`
# You will also want to load `dplyr`
=======
>>>>>>> first_vis_matches
# For this exercise you'll be working with the `diamonds` data set included in the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the column descriptions
# Also check the _column names_ and the _number of rows_ in the data set
View(diamonds)
print(colnames(diamonds))
print(nrow(diamonds))
# This data set has a lot of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds.sample`
diamonds.sample <- sample_n(diamonds, 1000)
# Start by making a new `ggplot` with the `diamonds.sample` as the data (no geometry yet)
# What do you see?
# Draw a scatter plot (with point geometry) with for the `diamonds.sample` set,
# with the `carat` mapped to the x-position and `price` mapped to the y-position.
# Draw the same plot as above, but color each of the points based on their clarity.
# Draw the same plot as above, but for the entire `diamonds` data set. Note this may take
# a few seconds to generate.
# Draw another scatter plot for `diamonds.sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
# Draw a scatter plot for `diamonds.sample` of `price` by `carat`, where each
# point has an aesthetic _shape_ based on the diamond's `cut`.
# Draw a scatter plot for `diamonds.sample` of *`cut`* by `carat`, where each
# point has an aesthetic _size_ based on the diamond's *`price`*
# Try coloring the above plot based on the diamond's price!
# Draw a line plot (with line geometry) for `diamonds.sample`. The x-position should be mapped to
# carat, y-position to price, and color to carat.
# That's kind of messy. Try using `smooth` geometry instead.
# Draw a plot with bar geometry (a bar chart), mapping the diamond's `cut` to the x-axis
# Add an aesthetic property that will _fill_ each bar geometry based on the `clarity` of the diamonds
# What kind of chart do you get?
# Draw a histogram of diamond prices.
# Try mapping each bar based on clarity as well!
# (For a more traditional "bell-curve", make a histogram of diamond `depths`)
# Draw a plot of the `diamonds.sample` data (price by carat), with both points for each
# diamond AND smoothed lines for each cut (hint: in a separate color)
# Making the points have some `alpha` transparency will make the plot look nicer
# multiple geoms (point & smooth)
## Bonus
# Draw a bar chart of average diamond prices by clarity, and include "error bars" marking
# the standard error of each measurement.
#
# You can calculate standard error as the _standard deviation_ divided by the square root
# of the number of measurements (prices)
# Start by creating a data frame `diamond.summary` that includes summarized data for each clarity group.
# Your summary data shuld include the mean price and the standard error of the price.
# Then draw the plot. The error bars should stretch from the mean-error to the mean+error.
ggplot(diamonds.sample)
ggplot(diamonds.sample) +
geom_point(mapping = aes(x = carat, y = price))
ggplot(diamonds.sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
ggplot(diamond) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
ggplot(diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
?ggplot
ggplot(diamonds.sample) +
geom_point(mapping = aes(x = carat, y = price, color = 'blue'))
ggplot(diamonds.sample) +
geom_point(mapping = aes(x = carat, y = price, color = "blue1"))
ggplot(diamonds.sample) +
geom_point(mapping = aes(x = carat, y = price), color = "blue")
ggplot(diamonds) +
geom_bar(mapping = aes(x = count))
?geom_bar
ggplot(diamonds) +
geom_bar(mapping = aes(count))
diamonds.sample <- sample_n(diamonds, 1000)
ggplot(diamonds.sample) +
geom_bar(mapping = aes(count))
ggplot(diamonds) +
geom_bar(mapping = aes(x = cut))
ggplot(diamonds) +
stat_count(mapping = aes(x = cut))
ggplot(diamonds) +
stat_summary(mapping = aes(x = cut, y = depth))
?stat_summary
ggplot(diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity))
ggplot(diamonds) +
geom_bar(mapping = aes(x = cut, position = "fill"))
ggplot(diamonds) +
geom_bar(aes(x = cut), position = "fill")
ggplot(diamonds) +
geom_bar(aes(x = cut, fill = clarity), position = "fill")
ggplot(diamonds) +
geom_bar(aes(x = cut, fill = clarity), position = "dodge")
ggplot(diamonds) +
geom_point(mapping = aes(x = cut, y = clarity))
ggplot(diamonds) +
geom_point(mapping = aes(x = cut, y = clarity), position = "jitter")
# Creating the Report
library(dplyr)
library(httr)
library(jsonlite)
library(knitr)
#Setup variables
base.uri <- "https://congress.api.sunlightfoundation.com/"
zip.code <- "98056"
search.query <- "education"
roll.id <- "s20-2017"
roll.id.url <- "https://www.senate.gov/legislative/LIS/roll_call_lists/roll_call_vote_cfm.cfm?congress=115&session=1&vote=00020"
#Local Representatives
#Accesses congress api to get representatives at specificed zip code
api.representatives <- paste0(base.uri, "legislators/locate")
query.representatives <- list(zip = zip.code)
response.representatives <- GET(api.representatives, query = query.representatives)
body.representatives <- fromJSON(content(response.representatives, "text"))
body.representatives <- flatten(body.representatives$results)
#Function to access info about a representative
RepresentativeInfo <- function(representative) {
rep.info <- paste0(representative$first_name, " ", representative$last_name, " (", representative$state, "-",
representative$party, "). Phone: ", representative$phone)
return(rep.info)
}
#Function to get url for picture of representative
RepresentativePic <- function(representative) {
pic.url <- paste0("https://theunitedstates.io/images/congress/225x275/", representative$bioguide_id, ".jpg")
return(pic.url)
}
#Gets info the three representatives
representative.1 <- RepresentativeInfo(body.representatives[1, ])
representative.2 <- RepresentativeInfo(body.representatives[2, ])
representative.3 <- RepresentativeInfo(body.representatives[3, ])
View(body.representatives)
# Creating the Report
library(dplyr)
library(httr)
library(jsonlite)
library(knitr)
#Setup variables
base.uri <- "https://congress.api.sunlightfoundation.com/"
zip.code <- "98056"
search.query <- "education"
roll.id <- "s20-2017"
roll.id.url <- "https://www.senate.gov/legislative/LIS/roll_call_lists/roll_call_vote_cfm.cfm?congress=115&session=1&vote=00020"
#Local Representatives
#Accesses congress api to get representatives at specificed zip code
api.representatives <- paste0(base.uri, "legislators/locate")
query.representatives <- list(zip = zip.code)
response.representatives <- GET(api.representatives, query = query.representatives)
body.representatives <- fromJSON(content(response.representatives, "text"))
body.representatives <- flatten(body.representatives$results)
#Function to access info about a representative
RepresentativeInfo <- function(representative) {
rep.info <- paste0(representative$first_name, " ", representative$last_name, " (", representative$state, "-",
representative$party, "). Phone: ", representative$phone)
return(rep.info)
}
#Function to get url for picture of representative
SenatorPic <- function(senator) {
pic.url <- paste0("https://theunitedstates.io/images/congress/225x275/", senator$bioguide_id, ".jpg")
return(pic.url)
}
#Gets info the three representatives
representative.1 <- RepresentativeInfo(body.representatives[1, ])
representative.2 <- RepresentativeInfo(body.representatives[2, ])
representative.3 <- RepresentativeInfo(body.representatives[3, ])
#Gets picture url for the two senators
zip.senators <- filter(body.representatives, chamber == "senate")
senator.1 <- SenatorPic(zip.senators[1, ])
senator.2 <- SenatorPic(zip.senators[2, ])
#Gets the name of the representative
sen.name.1 <- paste(zip.senators[1, "first_name"], zip.senators[1, "last_name"])
sen.name.2 <- paste(zip.senators[2, "first_name"], zip.senators[2, "last_name"])
?list
representatives <- list(body.representatives[1,"first_name"] = RepresentativeInfo(body.representatives[1, ]),
body.representatives[2,"first_name"] = RepresentativeInfo(body.representatives[2, ]),
body.representatives[3,"first_name"] = RepresentativeInfo(body.representatives[3, ]))
representatives <- list(body.representatives[1,"first_name"] = RepresentativeInfo(body.representatives[1, ]))
representatives <- list(paste(body.representatives[1,"first_name"]) = RepresentativeInfo(body.representatives[1, ]))
representatives <- list(body.representatives[1, first_name] = representative.1)
representatives <- list(body.representatives[1, "first_name"] = representative.1)
representatives <- list(rep.1 = representative.1)
print(representatives)
representatives <- list("body.representatives[1, first_name]" = representative.1)
print(representatives)
representatives <- list(rep.1 = representative.1, rep.2 = representative.2, rep.3 = representative.3)
knitr::opts_chunk$set(echo = TRUE)
representatives <- list(representative.1, representative.2, representative.3)
representatives <- list(rep.1 = RepresentativeInfo(body.representatives[1, ]), rep.2 = representative.2, rep.3 = representative.3)
representatives
colnames(individual.voters$voter.party) <- "voter party"
colnames(individual.voters)[2] <- "voter party"
View(individual.voters)
# Creating the Report
library(dplyr)
library(httr)
library(jsonlite)
library(knitr)
#Setup variables
base.uri <- "https://congress.api.sunlightfoundation.com/"
zip.code <- "98056"
search.query <- "education"
roll.id <- "s20-2017"
roll.id.url <- "https://www.senate.gov/legislative/LIS/roll_call_lists/roll_call_vote_cfm.cfm?congress=115&session=1&vote=00020"
#Local Representatives
#Accesses congress api to get representatives at specificed zip code
api.representatives <- paste0(base.uri, "legislators/locate")
query.representatives <- list(zip = zip.code)
response.representatives <- GET(api.representatives, query = query.representatives)
body.representatives <- fromJSON(content(response.representatives, "text"))
body.representatives <- flatten(body.representatives$results)
#Function to access info about a representative
RepresentativeInfo <- function(representative) {
rep.info <- paste0(representative$first_name, " ", representative$last_name, " (", representative$state, "-",
representative$party, "). Phone: ", representative$phone)
return(rep.info)
}
#Function to get url for picture of representative
SenatorPic <- function(senator) {
pic.url <- paste0("https://theunitedstates.io/images/congress/225x275/", senator$bioguide_id, ".jpg")
return(pic.url)
}
#Gets info the three representatives
representatives <- list(RepresentativeInfo(body.representatives[1, ]),
RepresentativeInfo(body.representatives[2, ]),
RepresentativeInfo(body.representatives[3, ]))
#Gets picture url for the two senators
zip.senators <- filter(body.representatives, chamber == "senate")
senator.pic.1 <- SenatorPic(zip.senators[1, ])
senator.pic.2 <- SenatorPic(zip.senators[2, ])
#Gets the name of the representative
sen.name.1 <- paste(zip.senators[1, "first_name"], zip.senators[1, "last_name"])
sen.name.2 <- paste(zip.senators[2, "first_name"], zip.senators[2, "last_name"])
#Congressional Bills
#Access congress api to get bills focused on the search.query parameter
api.bills <- paste0(base.uri, "bills")
query.bills <- list(query = search.query, per_page = 25, order = "introduced_on")
response.bills <- GET(api.bills, query = query.bills)
body.bills <- fromJSON(content(response.bills, "text"))
body.bills <- flatten(body.bills$results)
#Creates data frame for bills that display the bill id, date introduce, title of bill and link to the bill
bills.data.frame <- select(body.bills, bill_id, introduced_on, official_title)
bills.data.frame <- mutate(bills.data.frame, "Link to Bill" = paste0("[link](", body.bills$urls.congress, ")"))
colnames(bills.data.frame)[1] <- "Bill"
colnames(bills.data.frame)[2] <- "Date Introduced"
colnames(bills.data.frame)[3] <- "Title of Bill"
#Voting on an Issue
api.vote <- paste0(base.uri, "votes")
#Individual votes
query.voters <- list(roll_id = roll.id, fields = "voters")
get.request.result <- GET(api.vote, query = query.voters)
#Gets the body from the GET request
request.body.as.list <- content(get.request.result)
#Gets the voters data frame from the results data frame while it is still in JSON format
voters.list <- request.body.as.list$results[[1]]$voters
#Removes the names in the voters data frame
names(voters.list) <- NULL
#Converts voters.list to JSON
voters.json <- toJSON(voters.list)
#Converts voters.json from JSON to a data frame
voters.as.data.frame <- flatten(fromJSON(voters.json, flatten=TRUE))
individual.voters <- select(voters.as.data.frame, vote, voter.party) %>%
mutate(names = paste(voters.as.data.frame$voter.first_name, voters.as.data.frame$voter.last_name))
colnames(individual.voters)[2] <- "voter party"
#Party Votes
#Converts columns from lists to be properly used with dplyr
voters.as.data.frame$voter.party <- unlist(voters.as.data.frame$voter.party)
voters.as.data.frame$vote <- unlist(voters.as.data.frame$vote)
voters.as.data.frame$voter.bioguide_id <- unlist(voters.as.data.frame$voter.bioguide_id)
#Creates data frame from voters.as.data.frame that shows the majority vote for each party
party.votes.majority.members <- group_by(voters.as.data.frame, voter.party, vote) %>%
summarize(Vote.Majority = n()) %>%
mutate(Total.members = sum(Vote.Majority)) %>%
group_by(voter.party) %>%
filter(Vote.Majority == max(Vote.Majority))
#Creates readable column names for party.votes.majority.members
colnames(party.votes.majority.members)[1] <- "Party"
colnames(party.votes.majority.members)[3] <- "Party Votes"
colnames(party.votes.majority.members)[4] <- "Total Members"
#Creates data frame to compare the local representatives from zip code on their vote versus their party's majority vote
representative.votes <- inner_join(body.representatives, voters.as.data.frame, by = c("bioguide_id" = "voter.bioguide_id")) %>%
inner_join(party.votes.majority.members, by = c("party" = "Party")) %>%
select(first_name, last_name, party, vote.x, vote.y)
#Creates readable column names for representative.votes and party.votes.majority.members
colnames(representative.votes)[1] <- "Representative First Name"
colnames(representative.votes)[2] <- "Representative Last Name"
colnames(representative.votes)[4] <- "Representative Vote"
colnames(representative.votes)[5] <- "Party Vote"
#Creates data frame to breakdown how each party voted on roll.id vote
party.votes <- group_by(voters.as.data.frame, voter.party, vote) %>%
summarize(Votes = n())
party.votes.D <- filter(party.votes, voter.party == "D")
party.votes.I <- filter(party.votes, voter.party == "I")
party.votes.R <- filter(party.votes, voter.party == "R")
#Graphics for the vote breakdown of each party
barplot(party.votes.D$Votes, names.arg = party.votes.D$vote, xlab = "Vote", ylab = "Number of Votes",
main = "Party Vote Breakdown for Democrats")
barplot(party.votes.R$Votes, names.arg = party.votes.R$vote, xlab = "Vote", ylab = "Number of Votes",
main = "Party Vote Breakdown for Republicans")
barplot(party.votes.I$Votes, names.arg = party.votes.I$vote, xlab = "Vote", ylab = "Number of Votes",
main = "Party Vote Breakdown for Independents")
party.votes.majority.members <- group_by(voters.as.data.frame, voter.party, vote) %>%
summarize(Vote.Majority = n()) %>%
mutate(Total.members = sum(Vote.Majority))
View(party.votes.majority.members <- group_by(voters.as.data.frame, voter.party, vote) %>%
summarize(Vote.Majority = n()) %>%
mutate(Total.members = sum(Vote.Majority)))
# Creating the Report
library(dplyr)
library(httr)
library(jsonlite)
library(knitr)
#Setup variables
base.uri <- "https://congress.api.sunlightfoundation.com/"
zip.code <- "98056"
search.query <- "education"
roll.id <- "s20-2017"
roll.id.url <- "https://www.senate.gov/legislative/LIS/roll_call_lists/roll_call_vote_cfm.cfm?congress=115&session=1&vote=00020"
#Local Representatives
#Accesses congress api to get representatives at specificed zip code
api.representatives <- paste0(base.uri, "legislators/locate")
query.representatives <- list(zip = zip.code)
response.representatives <- GET(api.representatives, query = query.representatives)
body.representatives <- fromJSON(content(response.representatives, "text"))
body.representatives <- flatten(body.representatives$results)
#Function to access info about a representative
RepresentativeInfo <- function(representative) {
rep.info <- paste0(representative$first_name, " ", representative$last_name, " (", representative$state, "-",
representative$party, "). Phone: ", representative$phone)
return(rep.info)
}
#Function to get url for picture of representative
SenatorPic <- function(senator) {
pic.url <- paste0("https://theunitedstates.io/images/congress/225x275/", senator$bioguide_id, ".jpg")
return(pic.url)
}
#Gets info the three representatives
representatives <- list(RepresentativeInfo(body.representatives[1, ]),
RepresentativeInfo(body.representatives[2, ]),
RepresentativeInfo(body.representatives[3, ]))
#Gets picture url for the two senators
zip.senators <- filter(body.representatives, chamber == "senate")
senator.pic.1 <- SenatorPic(zip.senators[1, ])
senator.pic.2 <- SenatorPic(zip.senators[2, ])
#Gets the name of the representative
sen.name.1 <- paste(zip.senators[1, "first_name"], zip.senators[1, "last_name"])
sen.name.2 <- paste(zip.senators[2, "first_name"], zip.senators[2, "last_name"])
#Congressional Bills
#Access congress api to get bills focused on the search.query parameter
api.bills <- paste0(base.uri, "bills")
query.bills <- list(query = search.query, per_page = 25, order = "introduced_on")
response.bills <- GET(api.bills, query = query.bills)
body.bills <- fromJSON(content(response.bills, "text"))
body.bills <- flatten(body.bills$results)
#Creates data frame for bills that display the bill id, date introduce, title of bill and link to the bill
bills.data.frame <- select(body.bills, bill_id, introduced_on, official_title)
bills.data.frame <- mutate(bills.data.frame, "Link to Bill" = paste0("[link](", body.bills$urls.congress, ")"))
colnames(bills.data.frame)[1] <- "Bill"
colnames(bills.data.frame)[2] <- "Date Introduced"
colnames(bills.data.frame)[3] <- "Title of Bill"
#Voting on an Issue
api.vote <- paste0(base.uri, "votes")
#Individual votes
query.voters <- list(roll_id = roll.id, fields = "voters")
get.request.result <- GET(api.vote, query = query.voters)
#Gets the body from the GET request
request.body.as.list <- content(get.request.result)
#Gets the voters data frame from the results data frame while it is still in JSON format
voters.list <- request.body.as.list$results[[1]]$voters
#Removes the names in the voters data frame
names(voters.list) <- NULL
#Converts voters.list to JSON
voters.json <- toJSON(voters.list)
#Converts voters.json from JSON to a data frame
voters.as.data.frame <- flatten(fromJSON(voters.json, flatten=TRUE))
individual.voters <- select(voters.as.data.frame, vote, voter.party) %>%
mutate(names = paste(voters.as.data.frame$voter.first_name, voters.as.data.frame$voter.last_name)) %>%
filter(vote != "Not Voting")
colnames(individual.voters)[2] <- "voter party"
View(individual.voters)
voters.as.data.frame$voter.party <- unlist(voters.as.data.frame$voter.party)
voters.as.data.frame$vote <- unlist(voters.as.data.frame$vote)
voters.as.data.frame$voter.bioguide_id <- unlist(voters.as.data.frame$voter.bioguide_id)
#Creates data frame from voters.as.data.frame that shows the majority vote for each party
party.votes.majority.members <- group_by(voters.as.data.frame, voter.party, vote) %>%
summarize(Vote.Majority = n()) %>%
mutate(Total.members = sum(Vote.Majority)) %>%
group_by(voter.party) %>%
filter(Vote.Majority == max(Vote.Majority))
#Creates readable column names for party.votes.majority.members
colnames(party.votes.majority.members)[1] <- "Party"
colnames(party.votes.majority.members)[2] <- "Majority Vote for Party"
colnames(party.votes.majority.members)[3] <- "Party Votes"
colnames(party.votes.majority.members)[4] <- "Total Members"
#Creates data frame to compare the local representatives from zip code on their vote versus their party's majority vote
representative.votes <- inner_join(body.representatives, voters.as.data.frame, by = c("bioguide_id" = "voter.bioguide_id")) %>%
inner_join(party.votes.majority.members, by = c("party" = "Party")) #%>%
#select(first_name, last_name, party, vote.x, vote.y)
View(representative.votes)
representative.votes <- inner_join(body.representatives, voters.as.data.frame, by = c("bioguide_id" = "voter.bioguide_id")) %>%
inner_join(party.votes.majority.members, by = c("party" = "Party")) %>%
select(first_name, last_name, party, vote, "Majority Vote for Party")
colnames(party.votes.majority.members)[1] <- "Party"
colnames(party.votes.majority.members)[2] <- "Majority.Vote.for.Party"
colnames(party.votes.majority.members)[3] <- "Party Votes"
colnames(party.votes.majority.members)[4] <- "Total Members"
#Creates data frame to compare the local representatives from zip code on their vote versus their party's majority vote
representative.votes <- inner_join(body.representatives, voters.as.data.frame, by = c("bioguide_id" = "voter.bioguide_id")) %>%
inner_join(party.votes.majority.members, by = c("party" = "Party")) %>%
select(first_name, last_name, party, vote, Majority.Vote.for.Party)
representative.votes <- inner_join(body.representatives, voters.as.data.frame, by = c("bioguide_id" = "voter.bioguide_id")) %>%
inner_join(party.votes.majority.members, by = c("party" = "Party")) %>%
select(first_name, last_name, party, vote, Majority.Vote.for.Party) %>%
mutate(Same.as.Party = vote == Majority.Vote.for.Party)
colnames(party.votes.majority.members)[1] <- "Party"
colnames(party.votes.majority.members)[2] <- "Majority Vote for Party"
colnames(party.votes.majority.members)[3] <- "Party Votes"
colnames(party.votes.majority.members)[4] <- "Total Members"
#Creates data frame to compare the local representatives from zip code on their vote versus their party's majority vote
colnames(party.votes.majority.members)[2] <- "Majority.Vote.for.Party"
representative.votes <- inner_join(body.representatives, voters.as.data.frame, by = c("bioguide_id" = "voter.bioguide_id")) %>%
inner_join(party.votes.majority.members, by = c("party" = "Party")) %>%
select(first_name, last_name, party, vote, Majority.Vote.for.Party) %>%
mutate(Same.as.Party = vote == Majority.Vote.for.Party)
#Creates readable column names for representative.votes and party.votes.majority.members
colnames(representative.votes)[1] <- "Representative First Name"
colnames(representative.votes)[2] <- "Representative Last Name"
colnames(representative.votes)[3] <- "Party"
colnames(representative.votes)[4] <- "Representative Vote"
colnames(representative.votes)[5] <- "Party Vote"
colnames(representative.votes)[6] <- "Representative Vote same as Party Vote"
get.request.result
?content
?names
#Individual votes
query.voters <- list(roll_id = roll.id, fields = "voters")
get.request.result <- GET(api.vote, query = query.voters)
#Gets the body of data from the GET request and stores data as a list
request.body.as.list <- content(get.request.result)
#Gets the voters data frame as a list from the results data frame
voters.list <- request.body.as.list$results[[1]]$voters
#Removes the names in the voters data frame list
names(voters.list) <- NULL
#Converts voters.list from a list to JSON so data can be flattened and turned into a data frame
voters.json <- toJSON(voters.list)
#Converts voters.json from JSON to a data frame
voters.as.data.frame <- flatten(fromJSON(voters.json, flatten=TRUE))
shiny::runApp('UW/Classes/Winter_2017/INFO 201/assignments/a8-data-app-parkersingh')
species.choices <- unique(as.character(iris$Species))
runApp('UW/Classes/Winter_2017/INFO 201/assignments/a8-data-app-parkersingh')
runApp('UW/Classes/Winter_2017/INFO 201/assignments/a8-data-app-parkersingh')
runApp('UW/Classes/Winter_2017/INFO 201/assignments/a8-data-app-parkersingh')
runApp('UW/Classes/Winter_2017/INFO 201/assignments/a8-data-app-parkersingh')
axis.choices <- colnames(iris)[1:3]
axis.choices <- colnames(iris)[1:4]
axis.choices
runApp('UW/Classes/Winter_2017/INFO 201/assignments/a8-data-app-parkersingh')
<<<<<<< HEAD
<<<<<<< HEAD
library(dpylr)
library(dplyr)
setwd("~/UW/Classes/Winter_2017/INFO 201/assignments/FinalProject")
df <- read.csv("data/simpleSpeedDating.df.csv", stringsAsFactors = FALSE)
View(df)
df.simple <- read.csv("data/simpleSpeedDating.df.csv", stringsAsFactors = FALSE)
df <- read.csv("data/speed_dating.csv", stringsAsFactors = FALSE)
View(df)
View(df.simple)
View(df.simple)
colnames(df.simple)
View(df.simple)
income.match <- group_by(df.simple, Income) %>%
filter(Match == "Yes")
View(income.match)
income.match <- group_by(df.simple, Income) %>%
filter(Match == "Yes") %>%
mutate("Partner.Income" = df.simple[Partner.ID, "Income"]) %>%
select(ID, Sex, Partner.ID, Income, Partner.Income)
View(income.match)
income.data <- select(ID, Income)
income.data <- select(df.simple, ID, Income)
View(income.data)
income.data <- select(df.simple, ID, Income) %>%
group_by(ID) %>%
summarise()
View(income.data)
income.data <- select(df.simple, ID, Income) %>%
group_by(ID, Income) %>%
summarise()
View(income.data)
income.match <- group_by(df.simple, Income) %>%
filter(Match == "Yes") %>%
mutate("Partner.Income" = df.simple[Partner.ID, "Income"]) #%>%
View(income.match)
income.match <- group_by(df.simple, Income) %>%
filter(Match == "Yes") %>%
select(ID, Sex, Partner.ID, Income) %>%
mutate("Partner.Income" = df.simple[Partner.ID, "Income"])
income.match <- group_by(df.simple, Income) %>%
filter(Match == "Yes") %>%
select(ID, Sex, Partner.ID, Income) %>%
mutate("Partner.Income" = df.simple[df.simple$Partner.Id, "Income"])
=======
shiny::runApp('UW/Classes/Winter_2017/INFO 201/assignments/FinalProject')
runApp('UW/Classes/Winter_2017/INFO 201/assignments/FinalProject')
runApp('UW/Classes/Winter_2017/INFO 201/assignments/a8-data-app-parkersingh')
runApp('UW/Classes/Winter_2017/INFO 201/assignments/FinalProject')
setwd("~/UW/Classes/Winter_2017/INFO 201/assignments/FinalProject")
runApp()
runApp()
runApp()
speedDating.df <- read.csv("data/simpleSpeedDating.df.csv", stringsAsFactors = FALSE)
View(speedDating.df)
View(speedDating.df)
runApp()
runApp()
simpleSpeedDating.df <- read.csv("data/simpleSpeedDating.df.csv", stringsAsFactors = FALSE)
first.vis.speedDating <- simpleSpeedDating.df
runApp()
first.vis.speedDating <- simpleSpeedDating.df
first.vis.speedDating <- filter(first.vis.speedDating, Race == input$racial_group) %>%
group_by_('Race.of.Partner') %>%
summarize("Interactions" = nrow())
first.vis.speedDating <- filter(first.vis.speedDating, Race == "Black/African American") %>%
group_by_('Race.of.Partner') %>%
summarize("Interactions" = nrow())
first.vis.speedDating <- filter(first.vis.speedDating, Race == "Black/African American") %>%
group_by_('Race.of.Partner') %>%
summarize("Interactions" = n())
View(first.vis.speedDating)
runApp()
?mutate
runApp()
?stat_count
runApp()
runApp()
?ticktext
?labels
simpleSpeedDating.df <- gsub("Asian/Pacific Islander/Asian-American", "Asian/Pacific Islander")
simpleSpeedDating.df <- gsub(simpleSpeedDating.df, "Asian/Pacific Islander/Asian-American", "Asian/Pacific Islander")
View(speedDating.df)
simpleSpeedDating.df$Race.of.Partner[simpleSpeedDating.df$Race.of.Partner == "Asian/Pacific Islander/Asian-American"] <- "Asian/Pacific Islander"
simpleSpeedDating.df <- read.csv("data/simpleSpeedDating.df.csv", stringsAsFactors = FALSE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?median
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
simpleSpeedDating.df <- read.csv("data/simpleSpeedDating.df.csv", stringsAsFactors = FALSE)
View(simpleSpeedDating.df)
runApp()
runApp()
runApp()
runApp()
runApp()
>>>>>>> first_vis_matches
=======
setwd("~/UW/Classes/Winter_2017/INFO 201/assignments/FinalProject")
shiny::runApp()
runApp()
runApp()
runApp()
>>>>>>> second_vis_preferences
=======
1+1
2^10
print("Hello world")
2^10
print("PRESS Ctrl+Enter")
print(z)
x <- 4
y <- x
z <- y+7
z <- z+1
print(z)
x <- 4
y <- x
z <- y+7
z <- z+1
print(z)
x <- 4
y <- x
z <- y+7
z <- z+1
print(z)
x <- 4
y <- x
z <- y+7
z <- z+1
print(z)
stuff
""
install.packages("shiny")
library(shiny)
shiny::runApp('INFO_201/Final Project/FinalProject')
setwd("~/INFO_201/Final Project/FinalProject")
library(shiny)
library(dplyr)
library(ggplot2)
library(plotly)
library(tidyr)
simpleSpeedDating.df <- read.csv("data/simpleSpeedDating.df.csv", stringsAsFactors = FALSE)
simpleSpeedDating.df <- read.csv("data/simpleSpeedDating.df.csv", stringsAsFactors = FALSE)
q
library(shiny)
library(dplyr)
library(ggplot2)
library(plotly)
library(tidyr)
simpleSpeedDating.df <- read.csv("data/simpleSpeedDating.df.csv", stringsAsFactors = FALSE)
third_vis_data <- reactive({
speed.dating.df <- simpleSpeedDating.df
speed.dating.df <- group_by(speed.dating.df, Partner.ID, Sex) %>%
summarize(mean1 = mean(Overall.Like), mean2 = mean(Final.Attractiveness.Rating), mean3 = mean(Final.Sincerity.Rating)) %>%
mutate(overall.success = (mean1 + mean2 + mean3)/3) %>%
drop_na
View(speed.dating.df)
names(speed.dating.df)[names(speed.dating.df) == "Partner.ID"] <- "ID"
simpleSpeedDating.df$Attractiveness.5[is.na(simpleSpeedDating.df$Attractiveness.5)] <- mean(simpleSpeedDating.df$Attractiveness.5, na.rm = TRUE)
simpleSpeedDating.df$Fun.5[is.na(simpleSpeedDating.df$Fun.5)] <- mean(simpleSpeedDating.df$Fun.5, na.rm = TRUE)
simpleSpeedDating.df$Ambition.5[is.na(simpleSpeedDating.df$Ambition.5)] <- mean(simpleSpeedDating.df$Ambition.5, na.rm = TRUE)
simpleSpeedDating.df$Intelligence.5[is.na(simpleSpeedDating.df$Intelligence.5)] <- mean(simpleSpeedDating.df$Intelligence.5, na.rm = TRUE)
simpleSpeedDating.df$Sincerity.5[is.na(simpleSpeedDating.df$Sincerity.5)] <- mean(simpleSpeedDating.df$Sincerity.5, na.rm = TRUE)
simpleSpeedDating.df$Expected.Matches[is.na(simpleSpeedDating.df$Expected.Matches)] <- mean(simpleSpeedDating.df$Expected.Matches, na.rm = TRUE)
View(simpleSpeedDating.df)
speed.dating.df <- merge(x = speed.dating.df, y = simpleSpeedDating.df[ , c("ID", "Expected.Matches", "Attractiveness.4", "Sincerity.4", "Intelligence.4", "Fun.4",
"Ambition.4", "Attractiveness.5", "Sincerity.5", "Intelligence.5", "Fun.5", "Ambition.5")], by = "ID", na.rm = TRUE) %>%
unique()
speed.dating.df$Expected.Matches <- (speed.dating.df$Expected.Matches) / 20
speed.dating.df[, 7:16] <- speed.dating.df[, 7:16] / 10
speed.dating.df$overall.success <- speed.dating.df$overall.success / 10
speed.dating.df$overall.confidence <- (speed.dating.df$Attractiveness.4 + speed.dating.df$Sincerity.4 + speed.dating.df$Intelligence.4 +
speed.dating.df$Fun.4 + speed.dating.df$Ambition.4 + speed.dating.df$Attractiveness.5 + speed.dating.df$Sincerity.5 + speed.dating.df$Intelligence.5 +
speed.dating.df$Fun.5 + speed.dating.df$Ambition.5) / 10
speed.dating.df <- filter(speed.dating.df, overall.confidence > input$confidence[1] & overall.confidence < input$confidence[2]) %>%
filter(overall.success > input$success[1] & overall.success < input$success[2])
runApp()
simpleSpeedDating.df <- read.csv("data/simpleSpeedDating.df.csv", stringsAsFactors = FALSE)
third_vis_data <- reactive({
speed.dating.df <- simpleSpeedDating.df
speed.dating.df <- group_by(speed.dating.df, Partner.ID, Sex) %>%
summarize(mean1 = mean(Overall.Like), mean2 = mean(Final.Attractiveness.Rating), mean3 = mean(Final.Sincerity.Rating)) %>%
mutate(overall.success = (mean1 + mean2 + mean3)/3) %>%
drop_na
View(speed.dating.df)
names(speed.dating.df)[names(speed.dating.df) == "Partner.ID"] <- "ID"
simpleSpeedDating.df$Attractiveness.5[is.na(simpleSpeedDating.df$Attractiveness.5)] <- mean(simpleSpeedDating.df$Attractiveness.5, na.rm = TRUE)
simpleSpeedDating.df$Fun.5[is.na(simpleSpeedDating.df$Fun.5)] <- mean(simpleSpeedDating.df$Fun.5, na.rm = TRUE)
simpleSpeedDating.df$Ambition.5[is.na(simpleSpeedDating.df$Ambition.5)] <- mean(simpleSpeedDating.df$Ambition.5, na.rm = TRUE)
simpleSpeedDating.df$Intelligence.5[is.na(simpleSpeedDating.df$Intelligence.5)] <- mean(simpleSpeedDating.df$Intelligence.5, na.rm = TRUE)
simpleSpeedDating.df$Sincerity.5[is.na(simpleSpeedDating.df$Sincerity.5)] <- mean(simpleSpeedDating.df$Sincerity.5, na.rm = TRUE)
simpleSpeedDating.df$Expected.Matches[is.na(simpleSpeedDating.df$Expected.Matches)] <- mean(simpleSpeedDating.df$Expected.Matches, na.rm = TRUE)
View(simpleSpeedDating.df)
speed.dating.df <- merge(x = speed.dating.df, y = simpleSpeedDating.df[ , c("ID", "Expected.Matches", "Attractiveness.4", "Sincerity.4", "Intelligence.4", "Fun.4",
"Ambition.4", "Attractiveness.5", "Sincerity.5", "Intelligence.5", "Fun.5", "Ambition.5")], by = "ID", na.rm = TRUE) %>%
unique()
speed.dating.df$Expected.Matches <- (speed.dating.df$Expected.Matches) / 20
speed.dating.df[, 7:16] <- speed.dating.df[, 7:16] / 10
speed.dating.df$overall.success <- speed.dating.df$overall.success / 10
speed.dating.df$overall.confidence <- (speed.dating.df$Attractiveness.4 + speed.dating.df$Sincerity.4 + speed.dating.df$Intelligence.4 +
speed.dating.df$Fun.4 + speed.dating.df$Ambition.4 + speed.dating.df$Attractiveness.5 + speed.dating.df$Sincerity.5 + speed.dating.df$Intelligence.5 +
speed.dating.df$Fun.5 + speed.dating.df$Ambition.5) / 10
speed.dating.df <- filter(speed.dating.df, overall.confidence > input$confidence[1] & overall.confidence < input$confidence[2]) %>%
filter(overall.success > input$success[1] & overall.success < input$success[2])
library(shiny)
library(dplyr)
library(ggplot2)
library(plotly)
library(tidyr)
simpleSpeedDating.df <- read.csv("data/simpleSpeedDating.df.csv", stringsAsFactors = FALSE)
server <- function(input, output) {
third_vis_data <- reactive({
speed.dating.df <- simpleSpeedDating.df
speed.dating.df <- group_by(speed.dating.df, Partner.ID, Sex) %>%
summarize(mean1 = mean(Overall.Like), mean2 = mean(Final.Attractiveness.Rating), mean3 = mean(Final.Sincerity.Rating)) %>%
mutate(overall.success = (mean1 + mean2 + mean3)/3) %>%
drop_na
View(speed.dating.df)
names(speed.dating.df)[names(speed.dating.df) == "Partner.ID"] <- "ID"
simpleSpeedDating.df$Attractiveness.5[is.na(simpleSpeedDating.df$Attractiveness.5)] <- mean(simpleSpeedDating.df$Attractiveness.5, na.rm = TRUE)
simpleSpeedDating.df$Fun.5[is.na(simpleSpeedDating.df$Fun.5)] <- mean(simpleSpeedDating.df$Fun.5, na.rm = TRUE)
simpleSpeedDating.df$Ambition.5[is.na(simpleSpeedDating.df$Ambition.5)] <- mean(simpleSpeedDating.df$Ambition.5, na.rm = TRUE)
simpleSpeedDating.df$Intelligence.5[is.na(simpleSpeedDating.df$Intelligence.5)] <- mean(simpleSpeedDating.df$Intelligence.5, na.rm = TRUE)
simpleSpeedDating.df$Sincerity.5[is.na(simpleSpeedDating.df$Sincerity.5)] <- mean(simpleSpeedDating.df$Sincerity.5, na.rm = TRUE)
simpleSpeedDating.df$Expected.Matches[is.na(simpleSpeedDating.df$Expected.Matches)] <- mean(simpleSpeedDating.df$Expected.Matches, na.rm = TRUE)
View(simpleSpeedDating.df)
speed.dating.df <- merge(x = speed.dating.df, y = simpleSpeedDating.df[ , c("ID", "Expected.Matches", "Attractiveness.4", "Sincerity.4", "Intelligence.4", "Fun.4",
"Ambition.4", "Attractiveness.5", "Sincerity.5", "Intelligence.5", "Fun.5", "Ambition.5")], by = "ID", na.rm = TRUE) %>%
unique()
speed.dating.df$Expected.Matches <- (speed.dating.df$Expected.Matches) / 20
speed.dating.df[, 7:16] <- speed.dating.df[, 7:16] / 10
speed.dating.df$overall.success <- speed.dating.df$overall.success / 10
speed.dating.df$overall.confidence <- (speed.dating.df$Attractiveness.4 + speed.dating.df$Sincerity.4 + speed.dating.df$Intelligence.4 +
speed.dating.df$Fun.4 + speed.dating.df$Ambition.4 + speed.dating.df$Attractiveness.5 + speed.dating.df$Sincerity.5 + speed.dating.df$Intelligence.5 +
speed.dating.df$Fun.5 + speed.dating.df$Ambition.5) / 10
speed.dating.df <- filter(speed.dating.df, overall.confidence > input$confidence[1] & overall.confidence < input$confidence[2]) %>%
filter(overall.success > input$success[1] & overall.success < input$success[2])
return(speed.dating.df)
})
output$third.vis <- renderPlotly({
plot_ly(third_vis_data(), x = ~overall.confidence, y = ~overall.success) %>% layout(yaxis = list(range = c(0, 1), title = "Success of Participant", dtick = .2, tick0 = 0),
xaxis = list(title = "Confidence of Participant", tick0 = 0, dtick = .2, range = c(0, 1)))
})
}
shinyServer(server)
library(shiny)
library(dplyr)
library(ggplot2)
library(plotly)
library(tidyr)
simpleSpeedDating.df <- read.csv("data/simpleSpeedDating.df.csv", stringsAsFactors = FALSE)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput("confidence", label = h5("Select confidence range:"), min = 0,  max = 1, value = c(0, 1)
),
sliderInput("success", label = h5("Select success range:"), min = 0,  max = 1, value = c(0, 1)
)
),
mainPanel(
plotlyOutput("third.vis")
)
)
)
shinyUI(ui)
runApp()
setwd("~/INFO_201/Final Project/FinalProject")
library(shiny)
library(dplyr)
library(ggplot2)
library(plotly)
library(tidyr)
simpleSpeedDating.df <- read.csv("data/simpleSpeedDating.df.csv", stringsAsFactors = FALSE)
server <- function(input, output) {
third_vis_data <- reactive({
speed.dating.df <- simpleSpeedDating.df
speed.dating.df <- group_by(speed.dating.df, Partner.ID, Sex) %>%
summarize(mean1 = mean(Overall.Like), mean2 = mean(Final.Attractiveness.Rating), mean3 = mean(Final.Sincerity.Rating)) %>%
mutate(overall.success = (mean1 + mean2 + mean3)/3) %>%
drop_na
View(speed.dating.df)
names(speed.dating.df)[names(speed.dating.df) == "Partner.ID"] <- "ID"
simpleSpeedDating.df$Attractiveness.5[is.na(simpleSpeedDating.df$Attractiveness.5)] <- mean(simpleSpeedDating.df$Attractiveness.5, na.rm = TRUE)
simpleSpeedDating.df$Fun.5[is.na(simpleSpeedDating.df$Fun.5)] <- mean(simpleSpeedDating.df$Fun.5, na.rm = TRUE)
simpleSpeedDating.df$Ambition.5[is.na(simpleSpeedDating.df$Ambition.5)] <- mean(simpleSpeedDating.df$Ambition.5, na.rm = TRUE)
simpleSpeedDating.df$Intelligence.5[is.na(simpleSpeedDating.df$Intelligence.5)] <- mean(simpleSpeedDating.df$Intelligence.5, na.rm = TRUE)
simpleSpeedDating.df$Sincerity.5[is.na(simpleSpeedDating.df$Sincerity.5)] <- mean(simpleSpeedDating.df$Sincerity.5, na.rm = TRUE)
simpleSpeedDating.df$Expected.Matches[is.na(simpleSpeedDating.df$Expected.Matches)] <- mean(simpleSpeedDating.df$Expected.Matches, na.rm = TRUE)
View(simpleSpeedDating.df)
speed.dating.df <- merge(x = speed.dating.df, y = simpleSpeedDating.df[ , c("ID", "Expected.Matches", "Attractiveness.4", "Sincerity.4", "Intelligence.4", "Fun.4",
"Ambition.4", "Attractiveness.5", "Sincerity.5", "Intelligence.5", "Fun.5", "Ambition.5")], by = "ID", na.rm = TRUE) %>%
unique()
speed.dating.df$Expected.Matches <- (speed.dating.df$Expected.Matches) / 20
speed.dating.df[, 7:16] <- speed.dating.df[, 7:16] / 10
speed.dating.df$overall.success <- speed.dating.df$overall.success / 10
speed.dating.df$overall.confidence <- (speed.dating.df$Attractiveness.4 + speed.dating.df$Sincerity.4 + speed.dating.df$Intelligence.4 +
speed.dating.df$Fun.4 + speed.dating.df$Ambition.4 + speed.dating.df$Attractiveness.5 + speed.dating.df$Sincerity.5 + speed.dating.df$Intelligence.5 +
speed.dating.df$Fun.5 + speed.dating.df$Ambition.5) / 10
speed.dating.df <- filter(speed.dating.df, overall.confidence > input$confidence[1] & overall.confidence < input$confidence[2]) %>%
filter(overall.success > input$success[1] & overall.success < input$success[2])
return(speed.dating.df)
})
output$third.vis <- renderPlotly({
plot_ly(third_vis_data(), x = ~overall.confidence, y = ~overall.success) %>% layout(yaxis = list(range = c(0, 1), title = "Success of Participant", dtick = .2, tick0 = 0),
xaxis = list(title = "Confidence of Participant", tick0 = 0, dtick = .2, range = c(0, 1)))
})
}
shinyServer(server)
library(shiny)
library(dplyr)
library(ggplot2)
library(plotly)
library(tidyr)
simpleSpeedDating.df <- read.csv("data/simpleSpeedDating.df.csv", stringsAsFactors = FALSE)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput("confidence", label = h5("Select confidence range:"), min = 0,  max = 1, value = c(0, 1)
),
sliderInput("success", label = h5("Select success range:"), min = 0,  max = 1, value = c(0, 1)
)
),
mainPanel(
plotlyOutput("third.vis")
)
)
)
shinyUI(ui)
runApp()
>>>>>>> third_vis
